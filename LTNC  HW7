Bai 1
#include <bits/stdc++.h>

using namespace std;

int binarysearch(int a[], int l, int r, int x)
{
    if (l > r ){
       return - 1;
    }

    int m = (l + r) / 2;

    if(a[m] == x) {
        return m;
    }
    if(a[m] > x) {
        return(a, l, m - 1, x);
    }

    return binarysearch(a, m + 1, r, x);

}

int main()
{
    int a[] = {1, 2 ,3 , 4, 5, 6};

    int x;
    cin >> x;

    cout << binarysearch(a, 0, 5, x);
}

Bai 2

Cach 1

#include <bits/stdc++.h>

using namespace std;

set <string> se;

void sinh(string s)
{
    if(s.size() <= 3){
        se.insert(s);
    }
    else return;

    sinh("a" + s);

    sinh(s + "a");

    sinh("b" + s);

    sinh(s + "b");

    sinh("c" + s);

    sinh(s + "c");

    sinh("d" + s);

    sinh(s + "d");
}

int main()
{
    string s = "";

    sinh(s);

    for(auto x : se){
        if(x.size() == 3){
            cout << x << endl;
        }
    }

    return 0;
}

Cach 2;

#include <bits/stdc++.h>

using namespace std;

void sinh(string s)
{
    if(s.size() == 3)
    {
        cout << s << endl;
        return;
    }
    for(char i = 'a'; i <= 'd'; i++)
    {
        s.push_back(i);
        sinh(s);
        s.pop_back();
    }
}

int main()
{
    string res = "";
    sinh(res);

    return 0;
}


Bai 3

#include <iostream>
#include <cmath>
using namespace std;

int powerSum(int X, int N, int current = 1) {
    if (X == 0) {
        return 1;
    }
    if (X < 0 || current > X) {
        return 0;
    }
    int with_current = powerSum(X - pow(current, N), N, current + 1);
    int without_current = powerSum(X, N, current + 1);
    return with_current + without_current;
}

int main() {
    int X,N;
    cin>>X>>N;
    cout << powerSum(X, N) << endl;
    return 0;
}


Bai 4

vector<string> crosswordPuzzle(vector<string> c, string ws)
{
    if (ws.empty()) return c;
    size_t k = ws.find_last_of(';');
    string w = (k != string::npos ? ws.substr(k+1) : ws);
    ws.resize(k != string::npos ? k : 0);
    for (int dx = 1, dy = 0; dy <= 1; dx--, dy++)
        for (int y = 0; y < 10; y++)
            for (int x = 0; x < 10; x++)
                if (x < dx || y < dy || c[y - dy][x - dx] == '+')
                    for (int i = 0, n = 10-x*dx-y*dy, t = 0; i < n
                    && ((t=c[y+i*dy][x+i*dx])=='-' || t == w[i]);)
                        if(++i==n || c[y+i*dy][x+i*dx] == '+')
                            if (!w[i]) {
                                auto r = c;
                                for (int j = 0; w[j]; j++)
                                    r[y+j*dy][x+j*dx] = w[j];
                                r = crosswordPuzzle(r, ws);
                                if(r.size()) return r;
                            }
    return vector<string>();
}

